{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap a31ad99805c6f3edf621","webpack:///./src/FormStore.js","webpack:///./~/node-libs-browser/~/process/browser.js","webpack:///external \"mobx\""],"names":["DEFAULT_SERVER_ERROR_MESSAGE","isSame","val1","val2","Date","valueOf","Array","isArray","toString","observableChanged","change","store","dataChanges","set","name","newValue","get","dataServer","delete","observeComputedProperties","observeComputedPropertiesDisposers","forEach","f","Object","getOwnPropertyNames","data","key","options","log","disposer","storeDataChanged","push","processSaveResponse","updates","response","status","errorFields","error","serverError","assign","dataErrors","keys","concat","error_field","field","autoSaveInterval","from","value","afterSave","handleError","err","server","errorMessage","logError","FormStore","idProperty","autoSaveOptions","skipPropertyBeingEdited","keepServerError","minRefreshInterval","noop","console","bind","isReadOnly","isReady","undefined","create","beforeRefresh","afterRefresh","beforeSave","lastSync","saveQueue","Promise","resolve","Error","map","observeDataPropertiesDisposer","observeDataObjectDisposer","clear","configAutoSave","reset","autorunDisposer","asyncAutorun","fn","delay","length","save","propertyBeingEdited","hasChanges","validated","prop","temp","isLoading","now","past","result","saveOptions","allowCreate","saveAll","then","toJSON","toJS","property","slice","isSaving","saveNotification","active","errors","isInProgress","canSave","size"],"mappings":"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AAoBpD,MAAMgB,OAAN,CAAcoC,UAAlC;AACD;AACD,cAAO5B,MAAP;AACD;;;;;;;YA3MqB,K;;;;;YAEE,K;;;;;YAED,K;;;;;YAEG,I;;;;;YASP,E;;;;;YAEM,E;;;;;YAIM,EAAEuE,QAAQ,KAAV,EAAiBvE,QAAQ,IAAzB,E;;;;;YACG,I;;;mBAkYrBmB,S;;;;;;;;ACplBf;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAqC;;AAErC;AACA;AACA;;AAEA,4BAA2B;AAC3B;AACA;AACA;AACA,6BAA4B,UAAU;;;;;;;ACvLtC,gD","file":"FormStore.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"mobx\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"FormStore\", [\"mobx\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FormStore\"] = factory(require(\"mobx\"));\n\telse\n\t\troot[\"FormStore\"] = factory(root[\"mobx\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a31ad99805c6f3edf621","import { observable, observe, autorun, autorunAsync, action, computed, asMap, isComputedProp, isObservableArray } from 'mobx';\n\nconst DEFAULT_SERVER_ERROR_MESSAGE = 'Lost connection to server';\n\nfunction isSame(val1, val2) {\n  /* eslint-disable eqeqeq */\n  return (\n    val1 == val2 ||\n    (val1 instanceof Date && val2 instanceof Date && val1.valueOf() == val2.valueOf()) ||\n    ((Array.isArray(val1) || isObservableArray(val1)) &&\n     (Array.isArray(val2) || isObservableArray(val2)) &&\n     val1.toString() === val2.toString()\n    )\n  );\n  /* eslint-enable eqeqeq */\n}\n\n/**\n * Observes data and if changes come, add them to dataChanges,\n * unless it resets back to dataServer value, then clear that change\n * @this {FormStore}\n * @param {Object} change\n * @param {String} change.name - name of property that changed\n * @param {*} change.newValue\n */\nfunction observableChanged(change) {\n  const store = this;\n  action(() => {\n    store.dataChanges.set(change.name, change.newValue);\n\n    if (store.isSame(store.dataChanges.get(change.name), store.dataServer[change.name])) {\n      store.dataChanges.delete(change.name);\n    }\n  })();\n}\n\n/**\n * Sets up observation on all computed data properties, if any\n * @param {FormStore} store\n */\nfunction observeComputedProperties(store) {\n  store.observeComputedPropertiesDisposers.forEach((f) => f());\n  store.observeComputedPropertiesDisposers = [];\n  action(() => {\n    Object.getOwnPropertyNames(store.data).forEach((key) => {\n      if (isComputedProp(store.data, key)) {\n        store.options.log(`[${store.options.name}] Observing computed property: ${key}`);\n        const disposer = observe(store.data, key, ({ newValue }) => store.storeDataChanged({ name: key, newValue }));\n        store.observeComputedPropertiesDisposers.push(disposer);\n        // add or delete from dataChanges depending on whether value is same as in dataServer:\n        store.storeDataChanged({ name: key, newValue: store.data[key] });\n      }\n    });\n  })();\n}\n\n/**\n * Records successfully saved data as saved\n * and reverts fields server indicates to be in error\n * @param {FormStore} store\n * @param {Object} updates - what we sent to the server\n * @param {Object} response\n * @param {String} [response.data] - optional updated data to merge into the store (server.create can return id here)\n * @param {String} [response.status] - 'error' indicates one or more fields were invalid and not saved.\n * @param {String|Object} [response.error] - either a single error message to show to user if string or field-specific error messages if object\n * @param {String|Array} [response.error_field] - name of the field (or array of field names) in error\n * If autoSave is enabled, any field in error_field for which there is no error message in response.error will be reverted\n * to prevent autoSave from endlessly trying to save the changed field.\n * @returns response.status\n */\nasync function processSaveResponse(store, updates, response) {\n  store.options.log(`[${store.options.name}] Response received from server.`);\n\n  if (response.status === 'error') {\n    action(() => {\n      let errorFields = [];\n      if (response.error) {\n        if (typeof response.error === 'string') {\n          store.serverError = response.error;\n        } else {\n          Object.assign(store.dataErrors, response.error);\n          errorFields = Object.keys(response.error);\n        }\n      }\n\n      // Supports an array of field names in error_field or a string\n      errorFields = errorFields.concat(response.error_field);\n      errorFields.forEach((field) => {\n        if (store.options.autoSaveInterval && !store.dataErrors[field] && store.isSame(updates[field], store.data[field])) {\n          store.data[field] = store.dataServer[field]; // revert or it'll keep trying to autosave it\n        }\n        delete updates[field]; // don't save it as the new dataServer value\n      });\n    })();\n  } else {\n    store.serverError = null;\n  }\n\n  Object.assign(store.dataServer, updates);\n\n  action(() => {\n    if (response.data) {\n      Object.assign(store.dataServer, response.data);\n      Object.assign(store.data, response.data);\n    }\n\n    for (const [key, value] of Array.from(store.dataChanges)) {\n      if (store.isSame(value, store.dataServer[key])) {\n        store.dataChanges.delete(key);\n      }\n    }\n  })();\n\n  if (typeof store.options.afterSave === 'function') {\n    await store.options.afterSave(store, updates, response);\n  }\n\n  return response.status;\n}\n\n/**\n * @param {FormStore} store\n * @param {Error} err\n */\nfunction handleError(store, err) {\n  if (typeof store.options.server.errorMessage === 'function') {\n    store.serverError = store.options.server.errorMessage(err);\n  } else {\n    store.serverError = store.options.server.errorMessage;\n  }\n\n  store.options.logError(err);\n}\n\nclass FormStore {\n  /** @private */\n  options = {\n    name: 'FormStore', // used in log statements\n    idProperty: null,\n    autoSaveOptions: { skipPropertyBeingEdited: true, keepServerError: true },\n    autoSaveInterval: 0, // in ms\n    minRefreshInterval: 0, // in ms\n    log: function noop() {},\n    logError: console.error.bind(console), // eslint-disable-line\n    /** @type {Boolean|function(object): Boolean} passed status object */\n    isReadOnly: (status) => !status.isReady,\n    server: {\n      /** @type {undefined|function: Promise|Object} - MUST resolve to an object with all data properties present even if all have null values */\n      get: undefined,\n      /** @type {undefined|function(object): Promise|Object} passed updates object - see processSaveResponse for expected error response properties */\n      set: undefined,\n      /** @type {undefined|function(object}: Promise|Object} passed updates object - see processSaveResponse for expected error response properties */\n      create: undefined,\n      /** @type {String|function(error): String} passed error object */\n      errorMessage: DEFAULT_SERVER_ERROR_MESSAGE,\n    },\n    /** @type {undefined|function(FormStore): Promise|Boolean} passed store instance - if it returns false, no refresh will be performed */\n    beforeRefresh: undefined,\n    /** @type {undefined|function(FormStore): Promise} passed store instance */\n    afterRefresh: undefined,\n    /** @type {undefined|function(FormStore, object, object): Promise|Boolean} passed store instance, updates object and saveOptions object,\n     * (i.e. with skipPropertyBeingEdited, etc booleans) - if it returns false, no save will be performed */\n    beforeSave: undefined,\n    /** @type {undefined|function(FormStore, object, object): Promise} passed store instance, updates object and response object\n     * - updates object will already have fields removed from it that response indicates are in error */\n    afterSave: undefined,\n  };\n\n  /**\n   * @private\n   * @type {null|Date}\n   */\n  lastSync = null;\n  /** @private */\n  saveQueue = Promise.resolve();\n  /** @private */\n  observeDataObjectDisposer;\n  /** @private */\n  observeDataPropertiesDisposer;\n  /**\n   * @private\n   * @type {Array<Function>}\n   */\n  observeComputedPropertiesDisposers = [];\n  /** @private */\n  autorunDisposer;\n\n  /** @private */\n  @observable isReady = false; // true after initial data load (refresh) has completed\n  /** @private */\n  @observable isLoading = false;\n  /** @private */\n  @observable isSaving = false;\n  /** @private */\n  @observable serverError = null; // stores both communication error and any explicit response.error returned to save\n\n  /** @private */\n  // To support both Mobx 2.2+ and 3+, this is now done in constructor:\n  // @observable dataChanges = asMap(); // changes that will be sent to server\n\n  /** @private */\n  dataServer = {}; // data returned by the server (kept for checking old values)\n\n  @observable data = {};\n  // stores validation error message if any for each field (data structure is identical to data)\n  @observable dataErrors = {};\n  // active is set to true right after a save is completed and status is set to response.status\n  // this allows a confirmation message to be shown to user and to drive its dismissal,\n  // UI can set this observable's active property back to false.\n  @observable saveNotification = { active: false, status: null };\n  @observable propertyBeingEdited = null; // property currently being edited as set by startEditing()\n\n  isSame = isSame;\n\n  constructor(options, data) {\n    const store = this;\n    Object.assign(store.options, options);\n    if (!data && typeof store.options.server.get !== 'function') {\n      throw new Error('options must specify server get function or supply initial data object to constructor');\n    }\n    if (!typeof store.options.server.create !== 'function' && typeof store.options.server.set !== 'function') {\n      throw new Error('options must specify server set and/or create function(s)');\n    }\n    store.options.server.errorMessage = store.options.server.errorMessage || DEFAULT_SERVER_ERROR_MESSAGE;\n\n    // Supports both Mobx 3+ (observable.map) and 2.x (asMap) without deprecation warnings:\n    store.dataChanges = observable.map ? observable.map() : asMap(); // changes that will be sent to server\n\n    // register observe for changes to properties in store.data as well as to complete replacement of store.data object\n    store.storeDataChanged = observableChanged.bind(store);\n    store.observeDataPropertiesDisposer = observe(store.data, store.storeDataChanged);\n    store.observeDataObjectDisposer = observe(store, 'data', () => {\n      store.observeDataPropertiesDisposer && store.observeDataPropertiesDisposer();\n      store.observeDataPropertiesDisposer = observe(store.data, store.storeDataChanged);\n\n      store.dataChanges.clear();\n      action(() => {\n        Object.keys(store.data).forEach((key) => {\n          const value = store.data[key];\n          if (!store.isSame(value, store.dataServer[key])) {\n            store.dataChanges.set(key, value);\n          }\n        });\n        observeComputedProperties(store);\n      })();\n    });\n\n    store.configAutoSave(store.options.autoSaveInterval, store.options.autoSaveOptions);\n\n    if (data) {\n      store.dataServer = data;\n      store.reset();\n      observeComputedProperties(store);\n      store.isReady = true;\n    }\n  }\n\n  /**\n   *  disposes of all internal observation/autoruns so this instance can be garbage-collected.\n   */\n  dispose() {\n    const store = this;\n    store.autorunDisposer && store.autorunDisposer();\n    store.observeDataObjectDisposer && store.observeDataObjectDisposer();\n    store.observeDataPropertiesDisposer && store.observeDataPropertiesDisposer();\n    store.observeComputedPropertiesDisposers.forEach((f) => f());\n    store.autorunDisposer = undefined;\n    store.observeDataObjectDisposer = undefined;\n    store.observeDataPropertiesDisposer = undefined;\n    store.observeComputedPropertiesDisposers = [];\n  }\n\n  /**\n   * Configures and enables or disables auto-save\n   * @param {Number} autoSaveInterval - (in ms) - if non-zero autosave will be enabled, otherwise disabled\n   * @param {Object} [autoSaveOptions] - overrides the default autoSaveOptions if provided\n   */\n  configAutoSave(autoSaveInterval, autoSaveOptions) {\n    const store = this;\n    store.autorunDisposer && store.autorunDisposer();\n    store.options.autoSaveInterval = autoSaveInterval;\n    store.options.autoSaveOptions = autoSaveOptions || store.options.autoSaveOptions;\n\n    // auto-save by observing dataChanges keys\n    if (store.options.autoSaveInterval) {\n      // Supports both Mobx <=3 (autorunAsync) and Mobx 4+\n      // (ObservableMap keys no longer returning an Array is used to detect Mobx 4+,\n      // because in non-production build autorunAsync exists in 4.x to issue deprecation error)\n      const asyncAutorun = Array.isArray(store.dataChanges.keys()) ? autorunAsync : (fn, delay) => autorun(fn, { delay });\n\n      store.autorunDisposer = asyncAutorun(() => {\n        if ((!store.options.idProperty || store.data[store.options.idProperty]) && Array.from(store.dataChanges).length) {\n          store.options.log(`[${store.options.name}] Auto-save started...`);\n          store.save(store.options.autoSaveOptions);\n        }\n      }, store.options.autoSaveInterval);\n    } else {\n      store.autorunDisposer = undefined;\n    }\n  }\n\n  /**\n   * Marks data property as edit-in-progress and therefore it should not be autosaved - to be called on field focus\n   * @param {String|Array} name - field/property name (Array format supports json schema forms)\n   */\n  startEditing(name) {\n    const store = this;\n    store.propertyBeingEdited = Array.isArray(name) ? name[0] : name;\n  }\n\n  // to be called on field blur, any field name parameter is ignored\n  stopEditing() {\n    const store = this;\n    store.propertyBeingEdited = null;\n    if (store.status.hasChanges) {\n      // This will trigger autorun in case it already ran while we were editing:\n      action(() => {\n        // In MobX 4+, ObservableMap.keys() returns an Iterable, not an array\n        const key = Array.from(store.dataChanges)[0][0];\n        const value = store.dataChanges.get(key);\n        store.dataChanges.delete(key);\n        store.dataChanges.set(key, value);\n      })();\n    }\n  }\n\n  /**\n   * Returns the value of a field/property, optionally returning the last saved value for not validated/in progress fields\n   * Without validated:true, using this function is not necessary, can just access store.data[name].\n   * @param {String|Array} name - field/property name (Array format supports json schema forms)\n   * @param {Boolean} [validated] - only return validated value, i.e. if it's in error, fallback to dataServer\n   * @param {Boolean} [skipPropertyBeingEdited] - used only when validated is true to again fallback to dataServer\n   * @returns {*}\n   */\n  getValue(name, validated, skipPropertyBeingEdited) {\n    const store = this;\n    const prop = Array.isArray(name) ? name[0] : name;\n    if (validated) {\n      // check if property is being edited or invalid\n      if ((skipPropertyBeingEdited && prop === store.propertyBeingEdited) || store.dataErrors[prop]) {\n        return store.dataServer[prop];\n      }\n    }\n    return store.data[prop];\n  }\n\n  // Returns the last saved (or server-provided) set of data\n  // - in an afterSave callback it already includes merged updates that were not in error\n  getSavedData() {\n    const store = this;\n    return store.dataServer;\n  }\n\n  /**\n   * @returns {{errors: Array<String>, isReady: Boolean, isInProgress: Boolean, canSave: Boolean, hasChanges: Boolean, isReadOnly: Boolean}}\n   * errors is an array of any serverError plus all the error messages from all fields (in no particular order)\n   * (serverError is either the string returned in response.error or a communication error and is cleared on every refresh and save)\n   * isReady indicates initial data load (refresh) has been completed and user can start entering data\n   * isInProgress indicates either a refresh or a save is in progress\n   * canSave is true when no refresh or save is in progress and there are no validation errors\n   * hasChanges is true when one or more data properties has a value that's different from last-saved/server-loaded data.\n   * isReadOnly by default is true when isReady is false but can be set to the return value of an\n   *            optional callback to which this status object (without isReadOnly) is passed\n   */\n  @computed get status() {\n    const store = this;\n    let errors = [];\n\n    if (store.serverError) {\n      errors = [store.serverError];\n    }\n\n    Object.keys(store.dataErrors).forEach((key) => {\n      if (store.dataErrors[key]) {\n        errors.push(store.dataErrors[key]);\n      }\n    });\n\n    const status = {\n      errors,\n      isReady: store.isReady,\n      isInProgress: store.isLoading || store.isSaving,\n      canSave: !store.isLoading && !store.isSaving && (store.serverError ? errors.length === 1 : errors.length === 0),\n      hasChanges: !!store.dataChanges.size,\n    };\n    if (typeof store.options.isReadOnly === 'function') {\n      status.isReadOnly = store.options.isReadOnly(status);\n    } else {\n      status.isReadOnly = store.options.isReadOnly;\n    }\n    return status;\n  }\n\n  /**\n   * Copies dataServer into data and resets the error observable and lastSync.\n   * Mostly for internal use by refresh().\n   * @param {Object} [data] Optionally set store.data to this object instead of copying dataServer\n   */\n  reset(data) {\n    const store = this;\n\n    action(() => {\n      store.data = data || Object.assign({}, store.dataServer);\n\n      // setup error observable\n      const temp = {};\n      Object.keys(store.data).forEach((key) => {\n        temp[key] = null;\n      });\n      store.dataErrors = temp;\n\n      store.lastSync = null;\n    })();\n  }\n\n  /**\n   * Loads data from server unless a refresh was performed within the last minRefreshInterval (i.e. 15 minutes).\n   * If there are pending (and ready to save) changes, triggers save instead and 'resets the clock' on minRefreshInterval.\n   * For a store with idProperty defined, if that data property is falsy, loads from server only the very first time refresh() is called.\n   * @returns {Promise|Boolean} resolves to true if refresh actually performed, false if skipped\n   */\n  async refresh() {\n    const store = this;\n    if (!store.options.server.get || (store.isReady && store.options.idProperty && !store.data[store.options.idProperty])) {\n      return false;\n    }\n    store.options.log(`[${store.options.name}] Starting data refresh...`);\n\n    if (store.isLoading) {\n      store.options.log(`[${store.options.name}] Data is already being refreshed.`);\n      return false;\n    }\n\n    const now = new Date();\n    const past = new Date(Date.now() - store.options.minRefreshInterval);\n\n    // check if lastSync is between now and 15 minutes ago\n    if (past < store.lastSync && store.lastSync <= now) {\n      store.options.log(`[${store.options.name}] Data refreshed within last ${store.options.minRefreshInterval / 1000} seconds.`);\n      return false;\n    }\n\n    if (store.status.hasChanges && (!store.options.idProperty || store.data[store.options.idProperty])) {\n      store.options.log(`[${store.options.name}] Unsaved changes detected...`);\n\n      if (await store.save()) {\n        store.options.log(`[${store.options.name}] Postponing refresh for ${store.options.minRefreshInterval / 1000} seconds.`);\n        store.lastSync = new Date();\n        return false;\n      }\n    }\n\n    if (typeof store.options.beforeRefresh === 'function') {\n      if (await store.options.beforeRefresh(store) === false) {\n        return false;\n      }\n    }\n\n    store.options.log(`[${store.options.name}] Refreshing data...`);\n    store.isLoading = true;\n\n    try {\n      const result = await store.options.server.get();\n      store.options.log(`[${store.options.name}] Data received from server.`);\n\n      action(() => {\n        store.dataServer = result;\n        store.serverError = null;\n        store.reset();\n        store.lastSync = new Date();\n      })();\n\n      if (typeof store.options.afterRefresh === 'function') {\n        await store.options.afterRefresh(store);\n      }\n\n      observeComputedProperties(store);\n\n      store.options.log(`[${store.options.name}] Refresh finished.`);\n      if (!store.isReady) store.isReady = true;\n    } catch (err) {\n      handleError(store, err);\n    }\n\n    store.isLoading = false;\n    return true;\n  }\n\n  /**\n   * Sends ready-to-save data changes to the server (normally using server.set unless it's undefined, then with server.create)\n   * For a store with idProperty defined when that property is falsy and allowCreate=true, uses server.create instead.\n   * Calls to save() while one is in progress are queued.\n   * @param {Object} saveOptions - the object as a whole is also passed to the beforeSave callback\n   * @param {Boolean} [saveOptions.allowCreate=false] - for a store with idProperty defined, this must be true\n   *                                                    for the save to actually be performed when that property is falsy.\n   * @param {Boolean} [saveOptions.saveAll=false] - normally save only sends changes and if no changes, no save is done.\n   *                                                if saveAll=true, sends the full data object regardless of changes.\n   * @param {Boolean} [saveOptions.skipPropertyBeingEdited=false] - true in an auto-save\n   * @param {Boolean} [saveOptions.keepServerError=false] - true in an auto-save\n   * @returns {Promise|Boolean} resolves to true if save actually performed, false if skipped\n   */\n  save(saveOptions = {}) {\n    const { allowCreate = false, saveAll = false, skipPropertyBeingEdited = false, keepServerError = false } = saveOptions;\n    const store = this;\n\n    store.saveQueue = store.saveQueue.then(\n      async () => {\n        if (store.options.idProperty && !store.data[store.options.idProperty] && !allowCreate) {\n          return false;\n        }\n        store.options.log(`[${store.options.name}] Starting data save...`);\n\n        let updates;\n        if (saveAll) {\n          updates = {};\n          Object.getOwnPropertyNames(store.data).forEach((key) => { if (key[0] !== '$') updates[key] = store.data[key]; });\n        } else {\n          // Mobx 4+ toJS() exports a Map, not an Object and toJSON is the 'legacy' method to export an Object\n          updates = store.dataChanges.toJSON ? store.dataChanges.toJSON() : store.dataChanges.toJS();\n\n          if (Object.keys(updates).length === 0) {\n            store.options.log(`[${store.options.name}] No changes to save.`);\n            return false;\n          }\n\n          // check if we have property currently being edited in changes\n          // or if a property has an error and convert observable Arrays to plain ones\n          Object.keys(updates).forEach((property) => {\n            if (skipPropertyBeingEdited && property === store.propertyBeingEdited) {\n              store.options.log(`[${store.options.name}] Property \"${property}\" is being edited.`);\n              delete updates[property];\n              return;\n            }\n\n            if (store.dataErrors[property]) {\n              store.options.log(`[${store.options.name}] Property \"${property}\" is not validated.`);\n              delete updates[property];\n              return;\n            }\n\n            if (isObservableArray(updates[property])) {\n              updates[property] = updates[property].slice();\n            }\n\n            if (store.isSame(updates[property], store.dataServer[property])) {\n              store.options.log(`[${store.options.name}] Property \"${property}\" is same as on the server.`);\n              delete updates[property];\n              store.dataChanges.delete(property);\n            }\n          });\n\n          if (Object.keys(updates).length === 0) {\n            store.options.log(`[${store.options.name}] No changes ready to save.`);\n            return false;\n          }\n        }\n\n        if (typeof store.options.beforeSave === 'function') {\n          if (await store.options.beforeSave(store, updates, saveOptions) === false) {\n            return false;\n          }\n        }\n\n        store.options.log(`[${store.options.name}] Saving data...`);\n        store.options.log(updates);\n        store.isSaving = true;\n\n        try {\n          if (!keepServerError) {\n            store.serverError = null;\n          }\n\n          let response;\n          if (store.options.server.set && (!store.options.idProperty || !store.options.server.create || store.data[store.options.idProperty])) {\n            response = await store.options.server.set(updates);\n          } else {\n            response = await store.options.server.create(updates);\n          }\n\n          store.saveNotification.status = await processSaveResponse(store, updates, response);\n          store.saveNotification.active = true;\n\n          store.options.log(`[${store.options.name}] Save finished.`);\n        } catch (err) {\n          handleError(store, err);\n        }\n\n        store.isSaving = false;\n        return true;\n      }\n    );\n\n    return store.saveQueue;\n  }\n}\n\nexport default FormStore;\n\n\n\n// WEBPACK FOOTER //\n// ./src/FormStore.js","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/node-libs-browser/~/process/browser.js\n// module id = 1\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mobx\"\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}